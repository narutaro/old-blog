<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jenkins | Drink Beer, Do Something]]></title>
  <link href="http://narutaro.github.io/blog/categories/jenkins/atom.xml" rel="self"/>
  <link href="http://narutaro.github.io/"/>
  <updated>2014-06-14T11:42:54-07:00</updated>
  <id>http://narutaro.github.io/</id>
  <author>
    <name><![CDATA[narutaro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jenkinsでsshしたらハマった]]></title>
    <link href="http://narutaro.github.io/blog/2014/06/14/jenkins-ssh-fail/"/>
    <updated>2014-06-14T10:52:48-07:00</updated>
    <id>http://narutaro.github.io/blog/2014/06/14/jenkins-ssh-fail</id>
    <content type="html"><![CDATA[<h2 id="section">リモートサーバでのコマンド実行がコケる</h2>
<p>Jenkinsだと頻繁にリモートサーバでコマンド実行します．普通は手でリモートサーバにsshログインしてコマンド実行して動くのを確認して，よし，Jenkinsから同じことをさせようとなると思います．このときsshを非対話モードで使うと，Jenkins上では単なる「Shellの実行」を設定するだけでいいので以下のようにやりがちです．</p>

<div><div class="CodeRay">
  <div class="code"><pre>ssh user_name@my_remote_server -i key.pem ls -l 
</pre></div>
</div>
</div>

<p>コマンドが<code>ls</code>なんかだと問題ないですが，ここで，最後のコマンドの部分がリモートサーバのbash環境変数に依存している場合，コケます．bashが非対話型で起動された場合，<code>/etc/profile</code>とか<code>.bash_profile</code>とか.<code>bashrc</code>は読み込まれないからです．実は，Jenkinsというよりはshellの仕様の話です．</p>

<p lang="bash">手元にある環境で比較してみると，対話型起動の場合
~~~
my_name@my_remote_server:~$ env | wc -l
26
~~~</p>

<p lang="bash">非対話型の場合
~~~
my_name@my_local_server:~$ ssh my_name@my_remote_server -i key.pem env | wc -l
12
~~~</p>

<p>となりました．私はリモート側で　rubyを使っていたのですが，<code>rbenv</code>の切り替えに必要なパスが読み込まれない為に，正しいバージョンのrubyやgemを使えずコケてました．</p>

<h2 id="section-1">対策としては</h2>
<div><div class="CodeRay">
  <div class="code"><pre>my_name@my_local_server:~$ ssh my_name@my_remote_server -i key.pem env MY_VALUE=“VALUE” ; env | wc -l
</pre></div>
</div>
</div>

<p>でいいのかもしれませんが，実行コマンドが増えるといちいち変数を設定するのがめんどくさくなってきます．で，少し調べてみると，どうやらsshサーバ側の<code>/etc/sshd_config</code>で<code>PermitUserEnvironment yes</code>としておけば，非対話型でもリモート側の環境変数が読み込まれるようです．</p>

<p>ほぼこれで解決したのですが，私の場合はなぜか一つだけ一つだけ読み込まれずさらに調査．結局はその変数だけは<code>MY_VALUE=“VALUE”</code>をつかうことに．足りてない変数を見つけたきっかけは，sshのデバッグオプション<code>ssh -vvv</code>. 環境変数周りも全部出力してくれて，必要な情報を得ることができます．<a href="http://april.fool.jp/blogs/2013/07/freebsdlinux-ssh%E7%B5%8C%E7%94%B1%E3%81%A7%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B%E3%81%A8%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%82%92%E8%AA%AD%E3%81%BE%E3%81%AA/">ここ</a>が参考になります．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkinsのスレーブ機能が便利すぎる]]></title>
    <link href="http://narutaro.github.io/blog/2014/05/31/jekins-slave-setting/"/>
    <updated>2014-05-31T11:04:59-07:00</updated>
    <id>http://narutaro.github.io/blog/2014/05/31/jekins-slave-setting</id>
    <content type="html"><![CDATA[<p>Jenkinsのスレーブ機能がかなり便利だったので皆さんにお知らせ．</p>

<h1 id="section">今回スレーブが必要となった背景</h1>
<p>大抵のJenkinsスレーブの使い方は，ジョブ数が多くなってきたので負荷分散というケースが多いと思います．同じ設定になったJenkinsサーバが複数あって，同じジョブを分散するイメージ．このケースは結構Webにも情報がありました．</p>

<p>でも，今回のはむしろ，二つあるJenkinsサーバを楽に統合したいというものでした．すでにCIが動いている，自分のプロジェクトのServer-A Jenkinsと他のプロジェクトのServer-B Jenkinsを統合して集中管理っていう感じ．自分のServer-Aにはjenkinsだけじゃなくて，Javaやらビルドツールやらテストやらいろいろ入っているとして，AをBへくっつけるとするとやり方は</p>

<ul>
  <li>Server-B Jenkinsから個々のジョブをsshでログインしてServer-A上で実行</li>
  <li>Server-AをServer-B Jenkinsのスレーブとして設定して，マスタであるServer-Bからジョブをリモート実行</li>
</ul>

<p>両方やってみましたが，後者の方が圧倒的に楽でした．理由は複数あるジョブの設定を変えずにServer-A JenkinsからB Jenkinsにコピペするだけでいいから．おすすめ．</p>

<h1 id="section-1">マスタスレーブ構成の仕組み</h1>
<p>スレーブになるマシン(今回はServer-A)の条件は，Javaが入っていることだけ．マスタ側(Server-B Jenkins)でServer-Aをスレーブとして登録するとマスタからスレーブにJavaのエージェントプログラム(jar)が送り込まれます．これによりスレーブ上でマスタ側にあるジョブが実行できる仕組みです．送り込みはssh(scp?)でやっているようです．またマスタ側でどのジョブをどのスレーブで実行するかを設定できますので，単なる不可分散ではなく，ジョブ毎に実行するスレーブを指定する，ルーティングのようなことができます．</p>

<h1 id="section-2">スレーブノードの設定</h1>
<p>GUI上で，<code>Manage Jenkins</code> &gt; <code>Manage Nodes</code> &gt; <code>New Node</code>とたどって，<code>Dumb Slave</code>を選択．上記の仕組みなので，設定は以下だけ．</p>

<ul>
  <li>スレーブノードのIPの設定</li>
  <li>スレーブをどういう風に使うか（全ジョブか特定のジョブだけか，等）</li>
  <li>SSHの鍵設定</li>
</ul>

<p><img src="/images/article/jenkins_slave_setting/SlaveNodeSetting.png"></p>

<ul>
  <li><code>Host</code>にスレーブのIPアドレス</li>
  <li><code>Usage</code>を<code>Leave this node for tied jobs only</code>にします．後でジョブを設定するときにこのスレーブノードを選択したジョブのみこのスレーブで実行されます．</li>
  <li><code>Credentials</code>のところで，<code>Add</code>すると以下のSSHの認証設定画面がポップアップ.ここで<code>Kind</code>のところを<code>SSH Username with private key</code>として，<code>Username</code>にスレーブ側に接続するときのユーザ名をいれて，<code>Private Key</code>にSSHの秘密鍵をコピペ</li>
</ul>

<p><img src="/images/article/jenkins_slave_setting/SSHKeySetting.png"></p>

<h1 id="section-3">ジョブ側の設定</h1>
<p>GUIでスレーブ上で実行したいジョブの設定画面にいって，<code>Restrict where this project can be run</code>にチェックを入れて，さっき作ったスレーブの名前を指定．こんだけです．</p>

<p>マスタとスレーブの環境が違うと，マスタ側にはないパスとかツールを指定したりすることもあったりして，いろいろエラーがでることもあると思いますが，あくまでスレーブの設定をしているので，気にしなくていいです．</p>

<p><img src="/images/article/jenkins_slave_setting/JobSetting.png"></p>

<p>あとはマスタ側でジョブを実行すると，スレーブで実行されて，ビルド結果はマスタ上で見れるはずです．すごい．
Jenkinsは驚くほど簡単にマイグレーション，スケールアウトができることが分かりました．これは使わないと．</p>
]]></content>
  </entry>
  
</feed>
