<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Drink Beer, Do Something]]></title>
  <link href="http://narutaro.github.io/atom.xml" rel="self"/>
  <link href="http://narutaro.github.io/"/>
  <updated>2014-05-31T12:38:10-07:00</updated>
  <id>http://narutaro.github.io/</id>
  <author>
    <name><![CDATA[narutaro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octpressでimageをアップロードする方法]]></title>
    <link href="http://narutaro.github.io/blog/2014/05/31/octopress-image-upload/"/>
    <updated>2014-05-31T12:28:17-07:00</updated>
    <id>http://narutaro.github.io/blog/2014/05/31/octopress-image-upload</id>
    <content type="html"><![CDATA[<p><code>source/images</code>配下にすきなフォルダをつくって画像をおく</p>

<div><div class="CodeRay">
  <div class="code"><pre>mkdir -p source/images/article/my_post
mv my_pic.png source/images/article/my_post
</pre></div>
</div>
</div>

<p>記事の中に以下を書いておくとそこにimageが表示される</p>

<pre><code>&lt;img src="http://narutaro.github.io/images/article/jenkins_slave_setting/JobSetting.png"&gt;
</code></pre>

<p>パス指定は<code>/</code>からはじめないとハマる.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkinsのスレーブ機能が便利すぎる]]></title>
    <link href="http://narutaro.github.io/blog/2014/05/31/jekins-slave-setting/"/>
    <updated>2014-05-31T11:04:59-07:00</updated>
    <id>http://narutaro.github.io/blog/2014/05/31/jekins-slave-setting</id>
    <content type="html"><![CDATA[<p>Jenkinsのスレーブ機能がかなり便利だったので皆さんにお知らせ．</p>

<h1 id="section">今回スレーブが必要となった背景</h1>
<p>大抵のJenkinsスレーブの使い方は，ジョブ数が多くなってきたので負荷分散というケースが多いと思います．同じ設定になったJenkinsサーバが複数あって，同じジョブを分散するイメージ．このケースは結構Webにも情報がありました．</p>

<p>でも，今回のはむしろ，二つあるJenkinsサーバを楽に統合したいというものでした．すでにCIが動いている，自分のプロジェクトのServer-A Jenkinsと他のプロジェクトのServer-B Jenkinsを統合して集中管理っていう感じ．自分のServer-Aにはjenkinsだけじゃなくて，Javaやらビルドツールやらテストやらいろいろ入っているとして，AをBへくっつけるとするとやり方は</p>

<ul>
  <li>Server-B Jenkinsから個々のジョブをsshでログインしてServer-A上で実行</li>
  <li>Server-AをServer-B Jenkinsのスレーブとして設定して，マスタであるServer-Bからジョブをリモート実行</li>
</ul>

<p>両方やってみましたが，後者の方が圧倒的に楽でした．理由は複数あるジョブの設定を変えずにServer-A JenkinsからB Jenkinsにコピペするだけでいいから．おすすめ．</p>

<h1 id="section-1">マスタスレーブ構成の仕組み</h1>
<p>スレーブになるマシン(今回はServer-A)の条件は，Javaが入っていることだけ．マスタ側(Server-B Jenkins)でServer-Aをスレーブとして登録するとマスタからスレーブにJavaのエージェントプログラム(jar)が送り込まれます．これによりスレーブ上でマスタ側にあるジョブが実行できる仕組みです．送り込みはssh(scp?)でやっているようです．またマスタ側でどのジョブをどのスレーブで実行するかを設定できますので，単なる不可分散ではなく，ジョブ毎に実行するスレーブを指定する，ルーティングのようなことができます．</p>

<h1 id="section-2">スレーブノードの設定</h1>
<p>GUI上で，<code>Manage Jenkins</code> &gt; <code>Manage Nodes</code> &gt; <code>New Node</code>とたどって，<code>Dumb Slave</code>を選択．上記の仕組みなので，設定は以下だけ．</p>

<ul>
  <li>スレーブノードのIPの設定</li>
  <li>スレーブをどういう風に使うか（全ジョブか特定のジョブだけか，等）</li>
  <li>SSHの鍵設定</li>
</ul>

<p><img src="http://narutaro.github.io/images/article/jenkins_slave_setting/SlaveNodeSetting.png" /></p>

<ul>
  <li><code>Host</code>にスレーブのIPアドレス</li>
  <li><code>Usage</code>を<code>Leave this node for tied jobs only</code>にします．後でジョブを設定するときにこのスレーブノードを選択したジョブのみこのスレーブで実行されます．</li>
  <li><code>Credentials</code>のところで，<code>Add</code>すると以下のSSHの認証設定画面がポップアップ.ここで<code>Kind</code>のところを<code>SSH Username with private key</code>として，<code>Username</code>にスレーブ側に接続するときのユーザ名をいれて，<code>Private Key</code>にSSHの秘密鍵をコピペ</li>
</ul>

<p><img src="http://narutaro.github.io/images/article/jenkins_slave_setting/SSHKeySetting.png" /></p>

<h1 id="section-3">ジョブ側の設定</h1>
<p>GUIでスレーブ上で実行したいジョブの設定画面にいって，<code>Restrict where this project can be run</code>にチェックを入れて，さっき作ったスレーブの名前を指定．こんだけです．</p>

<p>マスタとスレーブの環境が違うと，マスタ側にはないパスとかツールを指定したりすることもあったりして，いろいろエラーがでることもあると思いますが，あくまでスレーブの設定をしているので，気にしなくていいです．</p>

<p><img src="http://narutaro.github.io/images/article/jenkins_slave_setting/JobSetting.png" /></p>

<p>あとはマスタ側でジョブを実行すると，スレーブで実行されて，ビルド結果はマスタ上で見れるはずです．すごい．
Jenkinsは驚くほど簡単にマイグレーション，スケールアウトができることが分かりました．これは使わないと．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressのコードブロックをカスタマイズ]]></title>
    <link href="http://narutaro.github.io/blog/2014/04/26/octopress-codeblock-customize/"/>
    <updated>2014-04-26T11:51:42-07:00</updated>
    <id>http://narutaro.github.io/blog/2014/04/26/octopress-codeblock-customize</id>
    <content type="html"><![CDATA[<h1 id="section">コードブロックの枠の色を変更</h1>
<p>コードブロックの背景色がデフォルトで紺色みたいな色で見にくいので，もっと明るい色に変更します．基本的に，色カスタマイズは<code>octopress/sass/custom/_colors</code>でやればいいのですが，ここで一つづつ変更するのもめんどくさい．このファイルの以下の部分のコメントを外せばとりあえず明るい色にはなるけど，背景は黄色っぽくてあんまり見やすくない．</p>

<div><div class="CodeRay">
  <div class="code"><pre>/* To use the light Solarized highlighting theme uncomment the following line */
//$solarized: light;
</pre></div>
</div>
</div>

<p><a href="https://ghost.org/">Ghost</a>風になる<a href="https://github.com/jmromer/casper">Casper</a>というテーマがあるのですが，それが， Octopressデフォルトのマークダウンエンジンの代わりに<code>kramdown</code>を使い，コードハイライトに<code>CodeRay</code>をつかっていい感じにしていました．Casperテーマ全体を当てるのは躊躇したので，KramdownとCodeRayのところだけやります．<a href="http://blog.codebykat.com/2013/05/23/gorgeous-octopress-codeblocks-with-coderay/">ここ</a>のサイトが分かりやすいです．</p>

<blockquote>
  <p>By default, Octopress uses a Markdown processor called RDiscount, which defaults to Pygments for code highlighting. Pygments doesn’t seem to have too many options, but it turns out if we switch to kramdown for Markdown processing, we can swap Pygments out for a highlighter called CodeRay. CodeRay allows for much more customization.</p>
</blockquote>

<p>なるほど．やってみる．</p>

<h1 id="section-1">ハマったところ</h1>
<p>基本的に，さっきの<a href="http://blog.codebykat.com/2013/05/23/gorgeous-octopress-codeblocks-with-coderay/">サイト</a>がとてもよく解説しているのですが，二点ほど．</p>

<ul>
  <li>先のサイトで使っている<code>.scss</code>ファイルをとってくるのは<a href="https://gist.github.com/andrewpthorp/5134070">ここ</a>です．</li>
  <li>CodeRayでのコードブロックは&#8220;&#8220;`で囲むのではなくて<code>~~~</code>です．また，<code>{:lang=“language”}</code>の指定をしないと変更が適用されません．<code>~~~</code>で囲むだけだけだとだめです．</li>
</ul>

<p>こんな感じ．ここまでやって気づいたけどCodeRayってなんかGitHub上では8ヶ月ほど動き止まってる感じ．大丈夫かな？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressでハッカー的ブログ]]></title>
    <link href="http://narutaro.github.io/blog/2014/04/25/octopress/"/>
    <updated>2014-04-25T18:24:48-07:00</updated>
    <id>http://narutaro.github.io/blog/2014/04/25/octopress</id>
    <content type="html"><![CDATA[<h1 id="octopress--github-pages">Octopress &amp; Github pages</h1>
<p>Tumblrからの乗り換えの為，新しいブログサービス探してたときに<a href="http://octopress.org/">Octopress</a>という良さげなものを発見．<a href="https://github.com/jekyll/jekyll">Jekyll</a>というRubyで書かれたスタティックサイトジェネレータを使ったブログ作成ツールっぽい．</p>

<blockquote>
  <p>Octopress is a blog framework for hackers</p>
</blockquote>

<p>とか書いてあって，カッコイイ．さらにGitHubが，”GitHub Pages”っていう，GitHubのプロジェクトWebページを作る為のサイトを用意していて，そこにOctopressで作ったスタティックなページを<code>push</code>することで，無料でgithub.ioドメイン上にブログサイトができるとのこと．よし，これは試すぞ．</p>

<h1 id="mac-mavericks">Mac Mavericksへのインストールと設定</h1>
<p>基本的に，<a href="http://octopress.org/">Octopressの公式サイト</a>に従うだけ……と思ったら，さすがハッカー向けだけあっていくつかハマったのでその辺りを書いていきます．</p>

<h2 id="ruby">Rubyのバージョン</h2>
<p>公式サイトのここに</p>

<blockquote>
  <p>If ruby –version doesn’t say you’re using Ruby <strong>at least</strong> 1.9.3, revisit your rbenv or RVM installation.</p>
</blockquote>

<p>とあったので，1.9.3以上だったらいいのかなと思い，Mavericksのデフォルトの<code>ruby 2.0.0p451 (2014-02-24 revision 45167) [universal.x86_64-darwin13]</code>でそのままいったら，いろいろエラーをいただきました．</p>

<div><div class="CodeRay">
  <div class="code"><pre>macbook:octopress hacker$ sudo bundle install
Password:
Fetching gem metadata from https://rubygems.org/.......
Fetching additional metadata from https://rubygems.org/..
Using rake 0.9.2.2

Gem::Ext::BuildError: ERROR: Failed to build gem native extension.

    /System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby extconf.rb -with-cflags=-w
checking for main() in -lc... yes
creating Makefile

make &quot;DESTDIR=&quot; clean

make &quot;DESTDIR=&quot;
compiling redcloth_attributes.c
compiling redcloth_inline.c
compiling redcloth_scan.c
linking shared-object redcloth_scan.bundle
clang: error: unknown argument: '-multiply_definedsuppress' [-Wunused-command-line-argument-hard-error-in-future]
clang: note: this will be a hard error (cannot be downgraded to a warning) in the future
make: *** [redcloth_scan.bundle] Error 1

make failed, exit code 2

Gem files will remain installed in /Library/Ruby/Gems/2.0.0/gems/RedCloth-4.2.9 for inspection.
Results logged to /Library/Ruby/Gems/2.0.0/extensions/universal-darwin-13/2.0.0/RedCloth-4.2.9/gem_make.out
An error occurred while installing RedCloth (4.2.9), and Bundler cannot continue.
 
Make sure that `gem install RedCloth -v '4.2.9'` succeeds before bundling.
</pre></div>
</div>
</div>

<p>ちゃんと<code>rbenv</code>か<code>rvm</code>を入れて，<code>1.9.3</code>に切り替えてからインストールに挑みましょう．</p>

<h2 id="xcode">Xcodeのコマンドラインツールの変更</h2>
<p>公式サイトのインストール手順のところで<code>bundle install</code>するところが<a href="http://octopress.org/docs/setup/">ある</a>のですが，ここでかなりコケました．よく理由が分からなかったのですが，<a href="https://langui.sh/2014/03/10/wunused-command-line-argument-hard-error-in-future-is-a-harsh-mistress/">ここのサイト</a>によると，Xcodeのバージョンアップにより，<code>unknown compiler flags</code>のエラーが <em>warn</em>ではなくて，<em>hard error</em>になって止まるようになったっぽいです．以下のように，よくわからないフラグはほっておいてとお願いしたら，進みました．</p>

<div><div class="CodeRay">
  <div class="code"><pre>export ARCHFLAGS=&quot;-Wno-error=unused-command-line-argument-hard-error-in-future&quot;
</pre></div>
</div>
</div>

<p>……でも本当にこれが原因だったのか？ これにはまってるときにやったリブートが効いている気がしないでもない．</p>

<h2 id="rake">二つのrake</h2>
<p>なんかの拍子にrakeが二つはいったみたいで，おこられた．<code>0.9.2.2</code>がいるっぽい．</p>

<div><div class="CodeRay">
  <div class="code"><pre>macbook:octopress hacker$ rake install
rake aborted!
Gem::LoadError: You have already activated rake 10.2.2, but your Gemfile requires rake 0.9.2.2. Prepending `bundle exec` to your command may solve this.
/Users/inoue/octopress/Rakefile:2:in `&lt;top (required)&gt;'
(See full trace by running task with --trace)
</pre></div>
</div>
</div>

<p>確認してみると，確かに二つのバージョンがはいっていました．</p>

<div><div class="CodeRay">
  <div class="code"><pre>macbook:octopress hacker$ gem list | grep rake
rake (10.2.2, 0.9.2.2)
</pre></div>
</div>
</div>

<p>rake 10.2.2を削除してみます.</p>

<div><div class="CodeRay">
  <div class="code"><pre>macbook:octopress hacker$ gem uninstall rake `10.2.2`
-bash: 10.2.2: command not found

Select gem to uninstall:
 1. rake-0.9.2.2
 2. rake-10.2.2
 3. All versions
&gt; 2
Successfully uninstalled rake-10.2.2
</pre></div>
</div>
</div>

<p>あらためて，<code>rake install</code></p>

<div><div class="CodeRay">
  <div class="code"><pre>rake install
## Copying classic theme into ./source and ./sass
mkdir -p source
cp -r .themes/classic/source/. source
mkdir -p sass
cp -r .themes/classic/sass/. sass
mkdir -p source/_posts
mkdir -p public
</pre></div>
</div>
</div>

<p>いけた．インストールと設定については，こんなところ．</p>

]]></content>
  </entry>
  
</feed>
